#!/usr/bin/env python3
from mumc_config_defaults import get_default_config_values
from mumc_modules.mumc_server_type import isJellyfinServer
from mumc_modules.mumc_versions import get_script_version


def mumc_configuration_builder(cfg,the_dict):
    config_file=''
    config_file += "#-------------Basic Config Options Start Here---------------#\n"
    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# Played Filter Statements\n"
    config_file += "#\n"
    config_file += "# [A,B,C]\n"
    config_file += "#\n"
    config_file += "# A - Condition Days\n"
    config_file += "# B - Played Count Inequality\n"
    config_file += "# C - Played Count\n"
    config_file += "#\n"
    config_file += "# Condition Days (A): Find media items last played at least this many days ago\n"
    config_file += "#   0-730500 - Number of days filter will use to determine when the media item was last played\n"
    config_file += "#  -1 - To disable deleting specified media type\n"
    config_file += "#\n"
    config_file += "# Played Count Inequality (B): Delete media items within this range based off of the chosen *_played_count.\n"
    config_file += "#   > - Filter media items with a played count greater than *_played_count days ago\n"
    config_file += "#   < - Filter media items with a played count less than *_played_count days ago\n"
    config_file += "#   >= - Filter media items with a played count greater than or equal to *_played_count days ago\n"
    config_file += "#   <= - Filter media items with a played count less than or equal to *_played_count days ago\n"
    config_file += "#   == - Filter media items with a played count equal to *_played_count days ago\n"
    config_file += "#   not > - Filter media items with a played count not greater than *_played_count days ago\n"
    config_file += "#   not < - Filter media items with a played count not less than *_played_count days ago\n"
    config_file += "#   not >= - Filter media items with a played count not greater than or equal to *_played_count days ago\n"
    config_file += "#   not <= - Filter media items with a played count not less than or equal to *_played_count days ago\n"
    config_file += "#   not == - Filter media items with a played count not equal to *_played_count days ago\n"
    config_file += "#\n"
    config_file += "# Played Count (C): Find media items with a played count relative to this number.\n"
    config_file += "#   1-730500 - Number of times a media item has been played\n"
    config_file += "#\n"
    config_file += "# ([-1,'>=',1] : default)\n"
    config_file += "#----------------------------------------------------------#\n"
    if not (the_dict['UPDATE_CONFIG']):
        config_file += "played_filter_movie=" + str(get_default_config_values('played_filter_movie')) + "\n"
        config_file += "played_filter_episode=" + str(get_default_config_values('played_filter_episode')) + "\n"
        config_file += "played_filter_audio=" + str(get_default_config_values('played_filter_audio')) + "\n"
        if (isJellyfinServer(the_dict['server_brand'])):
            config_file += "played_filter_audiobook=" + str(get_default_config_values('played_filter_audiobook')) + "\n"
    elif (the_dict['UPDATE_CONFIG']):
        config_file += "played_filter_movie=" + str(cfg.played_filter_movie) + "\n"
        config_file += "played_filter_episode=" + str(cfg.played_filter_episode) + "\n"
        config_file += "played_filter_audio=" + str(cfg.played_filter_audio) + "\n"
        if (isJellyfinServer(the_dict['server_brand'])):
            config_file += "played_filter_audiobook=" + str(cfg.played_filter_audiobook) + "\n"
    #config_file += "#----------------------------------------------------------#\n"
    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# Created Filter Statements\n"
    config_file += "#\n"
    config_file += "# [A,B,C,D]\n"
    config_file += "#\n"
    config_file += "# A - Condition Days\n"
    config_file += "# B - Played Count Inequality\n"
    config_file += "# C - Played Count\n"
    config_file += "# D - Behaviorial Control\n"
    config_file += "#\n"
    config_file += "# Condition Days (A): Find media items created at least this many days ago\n"
    config_file += "#   0-730500 - Number of days filter will use to determine when the media item was created\n"
    config_file += "#  -1 - To disable deleting specified media type\n"
    config_file += "#\n"
    config_file += "# Played Count Inequality (B): Delete media items within this range based off of the chosen *_played_count.\n"
    config_file += "#   > - Filter media items with a played count greater than *_played_count days ago\n"
    config_file += "#   < - Filter media items with a played count less than *_played_count days ago\n"
    config_file += "#   >= - Filter media items with a played count greater than or equal to *_played_count days ago\n"
    config_file += "#   <= - Filter media items with a played count less than or equal to *_played_count days ago\n"
    config_file += "#   == - Filter media items with a played count equal to *_played_count days ago\n"
    config_file += "#   not > - Filter media items with a played count not greater than *_played_count days ago\n"
    config_file += "#   not < - Filter media items with a played count not less than *_played_count days ago\n"
    config_file += "#   not >= - Filter media items with a played count not greater than or equal to *_played_count days ago\n"
    config_file += "#   not <= - Filter media items with a played count not less than or equal to *_played_count days ago\n"
    config_file += "#   not == - Filter media items with a played count not equal to *_played_count days ago\n"
    config_file += "#\n"
    config_file += "# Played Count (C): Find media items with a played count relative to this number.\n"
    config_file += "#   0-730500 - Number of times a media item has been played\n"
    config_file += "#\n"
    config_file += "# Behavioral Control (D): Determine if favorited_behavior_*, whitetagged_behavior_*, blacktagged_behavior_*,\n"
    config_file += "#  whitelisted_behavior_*, and blacklisted_behavior_* apply to media items meeting the created_filter_*.\n"
    config_file += "#   False - Media items meeting the created_filter_* will be deleted regardless of favorited_behavior_*,\n"
    config_file += "#    whitetagged_behavior_*, blacktagged_behavior_*, whitelisted_behavior_*, and blacklisted_behavior_*\n"
    config_file += "#   True - Media items meeting the created_filter_* will also have to meet configured behaviors; favorited_behavior_*,\n"
    config_file += "#    whitetagged_behavior_*, blacktagged_behavior_*, whitelisted_behavior_*, and blacklisted_behavior_*\n"
    config_file += "#\n"
    config_file += "# ([-1,'>=',1,True] : default)\n"
    config_file += "#----------------------------------------------------------#\n"
    if not (the_dict['UPDATE_CONFIG']):
        config_file += "created_filter_movie=" + str(get_default_config_values('created_filter_movie')) + "\n"
        config_file += "created_filter_episode=" + str(get_default_config_values('created_filter_episode')) + "\n"
        config_file += "created_filter_audio=" + str(get_default_config_values('created_filter_audio')) + "\n"
        if (isJellyfinServer(the_dict['server_brand'])):
            config_file += "created_filter_audiobook=" + str(get_default_config_values('created_filter_audiobook')) + "\n"
    elif (the_dict['UPDATE_CONFIG']):
        config_file += "created_filter_movie=" + str(cfg.created_filter_movie) + "\n"
        config_file += "created_filter_episode=" + str(cfg.created_filter_episode) + "\n"
        config_file += "created_filter_audio=" + str(cfg.created_filter_audio) + "\n"
        if (isJellyfinServer(the_dict['server_brand'])):
            config_file += "created_filter_audiobook=" + str(cfg.created_filter_audiobook) + "\n"
    #config_file += "#----------------------------------------------------------#\n"
    config_file += "\n"
    config_file += "#------------Advanced Config Options Start Here-------------#\n"
    #config_file += "#----------------------------------------------------------#\n"
    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# Favorited Behavioral Statements\n"
    config_file += "#\n"
    config_file += "# Favoriting is the first (and highest) priority\n"
    config_file += "#  Whitetagging behavior is ignored\n"
    config_file += "#  Blacktagging behavior is ignored\n"
    config_file += "#  Whitelisting behavior is ignored\n"
    config_file += "#  Blacklisting behavior is ignored\n"
    config_file += "#\n"
    config_file += "# [W, X, Y, Z]\n"
    config_file += "#\n"
    config_file += "# W - Action\n"
    config_file += "# X - User Conditional\n"
    config_file += "# Y - Played Conditional\n"
    config_file += "# Z - Action Control\n"
    config_file += "#\n"
    config_file += "# Action (W): Specify which action should be taken when (X) and (Y) is True.\n"
    config_file += "#   delete - Delete media item from server\n"
    config_file += "#   keep - Do NOT delete media item from server\n"
    config_file += "#\n"
    config_file += "# User Conditional (X): Specify how monitored users must have the media item favorited.\n"
    config_file += "#   all - Every monitored user must have the media item favorited\n"
    config_file += "#   any - One or more monitored users must have the media item favorited\n"
    config_file += "#\n"
    config_file += "# Played Conditional (Y): Specify how monitored users must meet the played_filter_* and/or created_filter_*.\n"
    config_file += "#   all - Every monitored user(s) must meet the Played Count and Played Count Inequality of both the played_filter_* and created_filter_*\n"
    config_file += "#   any - One or more monitored user(s) must meet the Played Count and Played Count Inequality of either the played_filter_* or created_filter_*\n"
    config_file += "#   all_any - Every monitored user(s) must meet the Played Count and Played Count Inequality of either the played_filter_* or created_filter_*\n"
    config_file += "#   any_all - One or more monitored user(s) must meet the Played Count and Played Count Inequality of both the played_filter_* and created_filter_*\n"
    config_file += "#   all_played - Every monitored user(s) must meet the Played Count and Played Count Inequality of the played_filter_*\n"
    config_file += "#   any_played - One or more monitored user(s) must meet the Played Count and Played Count Inequality of the played_filter_*\n"
    config_file += "#   all_created - Every monitored user(s) must meet the Played Count and Played Count Inequality of the created_filter_*\n"
    config_file += "#   any_created - One or more monitored user(s) must meet the Played Count and Played Count Inequality of the created_filter_*\n"
    config_file += "#   ignore - Ignore if monitored user(s) meet the Played Count and Played Count Inequality of both the played_filter_* and created_filter_*\n"
    config_file += "#\n"
    config_file += "# Action Control (Z): Specify the action the script will take when (X) and (Y) is True/False\n"
    config_file += "#   0 - No action taken on True; No action taken on False (disabled)\n"
    config_file += "#   1 - No action taken on True; Action taken on False\n"
    config_file += "#   2 - No action taken on True; Opposite action taken on False\n"
    config_file += "#   3 - Action taken on True; No action taken on False (recommended)\n"
    config_file += "#   4 - Action taken on True; Action taken on False\n"
    config_file += "#   5 - Action taken on True; Opposite action taken on False (recommended)\n"
    config_file += "#   6 - Opposite action taken on True; No action taken on False\n"
    config_file += "#   7 - Opposite action taken on True; Action taken on False\n"
    config_file += "#   8 - Opposite action taken on True; Opposite action taken on False\n"
    config_file += "#\n"
    config_file += "# (['keep','any','ignore',3] : default)\n"
    config_file += "#----------------------------------------------------------#\n"
    if not (the_dict['UPDATE_CONFIG']):
        config_file += "favorited_behavior_movie=" + str(get_default_config_values('favorited_behavior_movie')) + "\n"
        config_file += "favorited_behavior_episode=" + str(get_default_config_values('favorited_behavior_episode')) + "\n"
        config_file += "favorited_behavior_audio=" + str(get_default_config_values('favorited_behavior_audio')) + "\n"
        if (isJellyfinServer(the_dict['server_brand'])):
            config_file += "favorited_behavior_audiobook=" + str(get_default_config_values('favorited_behavior_audiobook')) + "\n"
    elif (the_dict['UPDATE_CONFIG']):
        config_file += "favorited_behavior_movie=" + str(cfg.favorited_behavior_movie) + "\n"
        config_file += "favorited_behavior_episode=" + str(cfg.favorited_behavior_episode) + "\n"
        config_file += "favorited_behavior_audio=" + str(cfg.favorited_behavior_audio) + "\n"
        if (isJellyfinServer(the_dict['server_brand'])):
            config_file += "favorited_behavior_audiobook=" + str(cfg.favorited_behavior_audiobook) + "\n"
    #config_file += "#----------------------------------------------------------#\n"
    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# Advanced movie favorites configurations\n"
    config_file += "#     Requires 'favorited_behavior_movie[3]>=0'\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "#  Keep movie based on the genres\n"
    config_file += "#  0 - ok to delete movie when genres are set as a favorite\n"
    config_file += "#  1 - keep movie if FIRST genre listed is set as a favorite\n"
    config_file += "#  2 - keep movie if ANY genre listed is set as a favorite\n"
    config_file += "# (0 : default)\n"
    config_file += "#----------------------------------------------------------#\n"
    if not (the_dict['UPDATE_CONFIG']):
        config_file += "favorited_advanced_movie_genre=" + str(get_default_config_values('favorited_advanced_movie_genre')) + "\n"
        config_file += "favorited_advanced_movie_library_genre=" + str(get_default_config_values('favorited_advanced_movie_library_genre')) + "\n"
    elif (the_dict['UPDATE_CONFIG']):
        config_file += "favorited_advanced_movie_genre=" + str(cfg.favorited_advanced_movie_genre) + "\n"
        config_file += "favorited_advanced_movie_library_genre=" + str(cfg.favorited_advanced_movie_library_genre) + "\n"
    #config_file += "#----------------------------------------------------------#\n"
    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# Advanced episode favorites configurations\n"
    config_file += "#     Requires 'favorited_behavior_episode[3]>=0'\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "#  Keep episode based on the genre(s) or studio-network(s)\n"
    config_file += "#  0 - ok to delete episode when its genres or studio-networks are set as a favorite\n"
    config_file += "#  1 - keep episode if FIRST genre or studio-network is set as a favorite\n"
    config_file += "#  2 - keep episode if ANY genres or studio-networks are set as a favorite\n"
    config_file += "# (0 : default)\n"
    config_file += "#----------------------------------------------------------#\n"
    if not (the_dict['UPDATE_CONFIG']):
        config_file += "favorited_advanced_episode_genre=" + str(get_default_config_values('favorited_advanced_episode_genre')) + "\n"
        config_file += "favorited_advanced_season_genre=" + str(get_default_config_values('favorited_advanced_season_genre')) + "\n"
        config_file += "favorited_advanced_series_genre=" + str(get_default_config_values('favorited_advanced_series_genre')) + "\n"
        config_file += "favorited_advanced_tv_library_genre=" + str(get_default_config_values('favorited_advanced_tv_library_genre')) + "\n"
        config_file += "favorited_advanced_tv_studio_network=" + str(get_default_config_values('favorited_advanced_tv_studio_network')) + "\n"
        config_file += "favorited_advanced_tv_studio_network_genre=" + str(get_default_config_values('favorited_advanced_tv_studio_network_genre')) + "\n"
    elif (the_dict['UPDATE_CONFIG']):
        config_file += "favorited_advanced_episode_genre=" + str(cfg.favorited_advanced_episode_genre) + "\n"
        config_file += "favorited_advanced_season_genre=" + str(cfg.favorited_advanced_season_genre) + "\n"
        config_file += "favorited_advanced_series_genre=" + str(cfg.favorited_advanced_series_genre) + "\n"
        config_file += "favorited_advanced_tv_library_genre=" + str(cfg.favorited_advanced_tv_library_genre) + "\n"
        config_file += "favorited_advanced_tv_studio_network=" + str(cfg.favorited_advanced_tv_studio_network) + "\n"
        config_file += "favorited_advanced_tv_studio_network_genre=" + str(cfg.favorited_advanced_tv_studio_network_genre) + "\n"
    #config_file += "#----------------------------------------------------------#\n"
    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# Advanced track favorites configurations\n"
    config_file += "#     Requires 'favorited_behavior_audio[3]>=0'\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "#  Keep track based on the genre(s) or artist(s)\n"
    config_file += "#  0 - ok to delete track when its genres or artists are set as a favorite\n"
    config_file += "#  1 - keep track if FIRST genre or artist is set as a favorite\n"
    config_file += "#  2 - keep track if ANY genres or artists are set as a favorite\n"
    config_file += "# (0 : default)\n"
    config_file += "#----------------------------------------------------------#\n"
    if not (the_dict['UPDATE_CONFIG']):
        config_file += "favorited_advanced_track_genre=" + str(get_default_config_values('favorited_advanced_track_genre')) + "\n"
        config_file += "favorited_advanced_album_genre=" + str(get_default_config_values('favorited_advanced_album_genre')) + "\n"
        config_file += "favorited_advanced_music_library_genre=" + str(get_default_config_values('favorited_advanced_music_library_genre')) + "\n"
        config_file += "favorited_advanced_track_artist=" + str(get_default_config_values('favorited_advanced_track_artist')) + "\n"
        config_file += "favorited_advanced_album_artist=" + str(get_default_config_values('favorited_advanced_album_artist')) + "\n"
    elif (the_dict['UPDATE_CONFIG']):
        config_file += "favorited_advanced_track_genre=" + str(cfg.favorited_advanced_track_genre) + "\n"
        config_file += "favorited_advanced_album_genre=" + str(cfg.favorited_advanced_album_genre) + "\n"
        config_file += "favorited_advanced_music_library_genre=" + str(cfg.favorited_advanced_music_library_genre) + "\n"
        config_file += "favorited_advanced_track_artist=" + str(cfg.favorited_advanced_track_artist) + "\n"
        config_file += "favorited_advanced_album_artist=" + str(cfg.favorited_advanced_album_artist) + "\n"
    #config_file += "#----------------------------------------------------------#\n"
    if (isJellyfinServer(the_dict['server_brand'])):
        config_file += "\n"
        config_file += "#----------------------------------------------------------#\n"
        config_file += "# Advanced audio book favorites configurations\n"
        config_file += "#     Requires 'favorited_behavior_audiobook[3]>=0'\n"
        config_file += "#----------------------------------------------------------#\n"
        config_file += "#  Keep audio book track based on the genres or authors\n"
        config_file += "#  0 - ok to delete audio book track when its genres or authors are set as a favorite\n"
        config_file += "#  1 - keep audio book track if FIRST genre or author is set as a favorite\n"
        config_file += "#  2 - keep audio book track if ANY genres or authors are set as a favorite\n"
        config_file += "# (0 : default)\n"
        config_file += "#----------------------------------------------------------#\n"
        if not (the_dict['UPDATE_CONFIG']):
            config_file += "favorited_advanced_audiobook_track_genre=" + str(get_default_config_values('favorited_advanced_audiobook_track_genre')) + "\n"
            config_file += "favorited_advanced_audiobook_genre=" + str(get_default_config_values('favorited_advanced_audiobook_genre')) + "\n"
            config_file += "favorited_advanced_audiobook_library_genre=" + str(get_default_config_values('favorited_advanced_audiobook_library_genre')) + "\n"
            config_file += "favorited_advanced_audiobook_track_author=" + str(get_default_config_values('favorited_advanced_audiobook_track_author')) + "\n"
            config_file += "favorited_advanced_audiobook_author=" + str(get_default_config_values('favorited_advanced_audiobook_author')) + "\n"
            config_file += "favorited_advanced_audiobook_library_author=" + str(get_default_config_values('favorited_advanced_audiobook_library_author')) + "\n"
        elif (the_dict['UPDATE_CONFIG']):
            config_file += "favorited_advanced_audiobook_track_genre=" + str(cfg.favorited_advanced_audiobook_track_genre) + "\n"
            config_file += "favorited_advanced_audiobook_genre=" + str(cfg.favorited_advanced_audiobook_genre) + "\n"
            config_file += "favorited_advanced_audiobook_library_genre=" + str(cfg.favorited_advanced_audiobook_library_genre) + "\n"
            config_file += "favorited_advanced_audiobook_track_author=" + str(cfg.favorited_advanced_audiobook_track_author) + "\n"
            config_file += "favorited_advanced_audiobook_author=" + str(cfg.favorited_advanced_audiobook_author) + "\n"
            config_file += "favorited_advanced_audiobook_library_author=" + str(cfg.favorited_advanced_audiobook_library_author) + "\n"
    #config_file += "#----------------------------------------------------------#\n"
    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# User entered whitetag name; chosen during setup\n"
    config_file += "#  Use a comma \',\' to seperate multiple tag names\n"
    config_file += "#   Ex: tagname,tag name,tag-name\n"
    config_file += "#  Backslash \'\\\' not allowed\n"
    config_file += "#----------------------------------------------------------#\n"
    if not (the_dict['UPDATE_CONFIG']):
        config_file += "whitetag='" + the_dict['whitetag'] + "'\n"
    elif (the_dict['UPDATE_CONFIG']):
        config_file += "whitetag='" + cfg.whitetag + "'\n"
    #config_file += "#----------------------------------------------------------#\n"
    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# Whitetagged Behavioral Statements\n"
    config_file += "#  Tags applied to a media item are seen by all users\n"
    config_file += "#\n"
    config_file += "# Whitetagging is the second priority\n"
    config_file += "#  Blacktagging behavior is ignored\n"
    config_file += "#  Whitelisting behavior is ignored\n"
    config_file += "#  Blacklisting behavior is ignored\n"
    config_file += "#\n"
    config_file += "# [W, X, Y, Z]\n"
    config_file += "#\n"
    config_file += "# W - Action\n"
    config_file += "# X - User Conditional\n"
    config_file += "# Y - Played Conditional\n"
    config_file += "# Z - Action Control\n"
    config_file += "#\n"
    config_file += "# Action (W): Specify which action should be taken when (X) and (Y) is True.\n"
    config_file += "#   delete - Delete media item from server\n"
    config_file += "#   keep - Do NOT delete media item from server\n"
    config_file += "#\n"
    config_file += "# User Conditional (X): Specify how monitored users must have the media item whitetagged.\n"
    config_file += "#   all - Every monitored user must have the media item whitetagged\n"
    config_file += "#   any - N/A; Tags apply to all users\n"
    config_file += "#\n"
    config_file += "# Played Conditional (Y): Specify how monitored users must meet the played_filter_* and/or created_filter_*.\n"
    config_file += "#   all - Every monitored user(s) must meet the Played Count and Played Count Inequality of both the played_filter_* and created_filter_*\n"
    config_file += "#   any - One or more monitored user(s) must meet the Played Count and Played Count Inequality of either the played_filter_* or created_filter_*\n"
    config_file += "#   all_any - Every monitored user(s) must meet the Played Count and Played Count Inequality of either the played_filter_* or created_filter_*\n"
    config_file += "#   any_all - One or more monitored user(s) must meet the Played Count and Played Count Inequality of both the played_filter_* and created_filter_*\n"
    config_file += "#   all_played - Every monitored user(s) must meet the Played Count and Played Count Inequality of the played_filter_*\n"
    config_file += "#   any_played - One or more monitored user(s) must meet the Played Count and Played Count Inequality of the played_filter_*\n"
    config_file += "#   all_created - Every monitored user(s) must meet the Played Count and Played Count Inequality of the created_filter_*\n"
    config_file += "#   any_created - One or more monitored user(s) must meet the Played Count and Played Count Inequality of the created_filter_*\n"
    config_file += "#   ignore - Ignore if monitored user(s) meet the Played Count and Played Count Inequality of both the played_filter_* and created_filter_*\n"
    config_file += "#\n"
    config_file += "# Action Control (Z): Specify the action the script will take when (X) and (Y) is True/False\n"
    config_file += "#   0 - No action taken on True; No action taken on False (disabled)\n"
    config_file += "#   1 - No action taken on True; Action taken on False\n"
    config_file += "#   2 - No action taken on True; Opposite action taken on False\n"
    config_file += "#   3 - Action taken on True; No action taken on False (recommended)\n"
    config_file += "#   4 - Action taken on True; Action taken on False\n"
    config_file += "#   5 - Action taken on True; Opposite action taken on False (recommended)\n"
    config_file += "#   6 - Opposite action taken on True; No action taken on False\n"
    config_file += "#   7 - Opposite action taken on True; Action taken on False\n"
    config_file += "#   8 - Opposite action taken on True; Opposite action taken on False\n"
    config_file += "#\n"
    config_file += "# (['keep','all','ignore',0] : default)\n"
    config_file += "#----------------------------------------------------------#\n"
    if not (the_dict['UPDATE_CONFIG']):
        config_file += "whitetagged_behavior_movie=" + str(get_default_config_values('whitetagged_behavior_movie')) + "\n"
        config_file += "whitetagged_behavior_episode=" + str(get_default_config_values('whitetagged_behavior_episode')) + "\n"
        config_file += "whitetagged_behavior_audio=" + str(get_default_config_values('whitetagged_behavior_audio')) + "\n"
        if (isJellyfinServer(the_dict['server_brand'])):
            config_file += "whitetagged_behavior_audiobook=" + str(get_default_config_values('whitetagged_behavior_audiobook')) + "\n"
    elif (the_dict['UPDATE_CONFIG']):
        config_file += "whitetagged_behavior_movie=" + str(cfg.whitetagged_behavior_movie) + "\n"
        config_file += "whitetagged_behavior_episode=" + str(cfg.whitetagged_behavior_episode) + "\n"
        config_file += "whitetagged_behavior_audio=" + str(cfg.whitetagged_behavior_audio) + "\n"
        if (isJellyfinServer(the_dict['server_brand'])):
            config_file += "whitetagged_behavior_audiobook=" + str(cfg.whitetagged_behavior_audiobook) + "\n"
    #config_file += "#----------------------------------------------------------#\n"
    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# User entered blacktag name; chosen during setup\n"
    config_file += "#  Use a comma \',\' to seperate multiple tag names\n"
    config_file += "#   Ex: tagname,tag name,tag-name\n"
    config_file += "#  Backslash \'\\\' not allowed\n"
    config_file += "#----------------------------------------------------------#\n"
    if not (the_dict['UPDATE_CONFIG']):
        config_file += "blacktag='" + the_dict['blacktag'] + "'\n"
    elif (the_dict['UPDATE_CONFIG']):
        config_file += "blacktag='" + cfg.blacktag + "'\n"
    #config_file += "#----------------------------------------------------------#\n"
    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# Blacktagged Behavioral Statements\n"
    config_file += "#  Tags applied to a media item are seen by all users\n"
    config_file += "#\n"
    config_file += "# Blacktagging is the third priority\n"
    config_file += "#  Whitelisting behavior is ignored\n"
    config_file += "#  Blacklisting behavior is ignored\n"
    config_file += "#\n"
    config_file += "# [W, X, Y, Z]\n"
    config_file += "#\n"
    config_file += "# W - Action\n"
    config_file += "# X - User Conditional\n"
    config_file += "# Y - Played Conditional\n"
    config_file += "# Z - Action Control\n"
    config_file += "#\n"
    config_file += "# Action (W): Specify which action should be taken when (X) and (Y) is True.\n"
    config_file += "#   delete - Delete media item from server\n"
    config_file += "#   keep - Do NOT delete media item from server\n"
    config_file += "#\n"
    config_file += "# User Conditional (X): Specify how monitored users must have the media item blacktagged.\n"
    config_file += "#   all - Every monitored user must have the media item blacktagged\n"
    config_file += "#   any - N/A; Tags apply to all users\n"
    config_file += "#\n"
    config_file += "# Played Conditional (Y): Specify how monitored users must meet the played_filter_* and/or created_filter_*.\n"
    config_file += "#   all - Every monitored user(s) must meet the Played Count and Played Count Inequality of both the played_filter_* and created_filter_*\n"
    config_file += "#   any - One or more monitored user(s) must meet the Played Count and Played Count Inequality of either the played_filter_* or created_filter_*\n"
    config_file += "#   all_any - Every monitored user(s) must meet the Played Count and Played Count Inequality of either the played_filter_* or created_filter_*\n"
    config_file += "#   any_all - One or more monitored user(s) must meet the Played Count and Played Count Inequality of both the played_filter_* and created_filter_*\n"
    config_file += "#   all_played - Every monitored user(s) must meet the Played Count and Played Count Inequality of the played_filter_*\n"
    config_file += "#   any_played - One or more monitored user(s) must meet the Played Count and Played Count Inequality of the played_filter_*\n"
    config_file += "#   all_created - Every monitored user(s) must meet the Played Count and Played Count Inequality of the created_filter_*\n"
    config_file += "#   any_created - One or more monitored user(s) must meet the Played Count and Played Count Inequality of the created_filter_*\n"
    config_file += "#   ignore - Ignore if monitored user(s) meet the Played Count and Played Count Inequality of both the played_filter_* and created_filter_*\n"
    config_file += "#\n"
    config_file += "# Action Control (Z): Specify the action the script will take when (X) and (Y) is True/False\n"
    config_file += "#   0 - No action taken on True; No action taken on False (disabled)\n"
    config_file += "#   1 - No action taken on True; Action taken on False\n"
    config_file += "#   2 - No action taken on True; Opposite action taken on False\n"
    config_file += "#   3 - Action taken on True; No action taken on False (recommended)\n"
    config_file += "#   4 - Action taken on True; Action taken on False\n"
    config_file += "#   5 - Action taken on True; Opposite action taken on False (recommended)\n"
    config_file += "#   6 - Opposite action taken on True; No action taken on False\n"
    config_file += "#   7 - Opposite action taken on True; Action taken on False\n"
    config_file += "#   8 - Opposite action taken on True; Opposite action taken on False\n"
    config_file += "#\n"
    config_file += "# (['delete','all','any',0] : default)\n"
    config_file += "#----------------------------------------------------------#\n"
    if not (the_dict['UPDATE_CONFIG']):
        config_file += "blacktagged_behavior_movie=" + str(get_default_config_values('blacktagged_behavior_movie')) + "\n"
        config_file += "blacktagged_behavior_episode=" + str(get_default_config_values('blacktagged_behavior_episode')) + "\n"
        config_file += "blacktagged_behavior_audio=" + str(get_default_config_values('blacktagged_behavior_audio')) + "\n"
        if (isJellyfinServer(the_dict['server_brand'])):
            config_file += "blacktagged_behavior_audiobook=" + str(get_default_config_values('blacktagged_behavior_audiobook')) + "\n"
    elif (the_dict['UPDATE_CONFIG']):
        config_file += "blacktagged_behavior_movie=" + str(cfg.blacktagged_behavior_movie) + "\n"
        config_file += "blacktagged_behavior_episode=" + str(cfg.blacktagged_behavior_episode) + "\n"
        config_file += "blacktagged_behavior_audio=" + str(cfg.blacktagged_behavior_audio) + "\n"
        if (isJellyfinServer(the_dict['server_brand'])):
            config_file += "blacktagged_behavior_audiobook=" + str(cfg.blacktagged_behavior_audiobook) + "\n"
    #config_file += "#----------------------------------------------------------#\n"
    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# Whitelisted Behavioral Statements\n"
    config_file += "#\n"
    config_file += "# Whitelisting is the fourth priority\n"
    config_file += "#  Blacklisting behavior is ignored\n"
    config_file += "#\n"
    config_file += "# [W, X, Y, Z]\n"
    config_file += "#\n"
    config_file += "# W - Action\n"
    config_file += "# X - User Conditional\n"
    config_file += "# Y - Played Conditional\n"
    config_file += "# Z - Action Control\n"
    config_file += "#\n"
    config_file += "# Action (W): Specify which action should be taken when (X) and (Y) is True.\n"
    config_file += "#   delete - Delete media item from server\n"
    config_file += "#   keep - Do NOT delete media item from server\n"
    config_file += "#\n"
    config_file += "# User Conditional (X): Specify how monitored users must have the media item whitelisted.\n"
    config_file += "#   all - Every monitored user must have the media item whitelisted\n"
    config_file += "#   any - One or more monitored users must have the media item whitelisted\n"
    config_file += "#\n"
    config_file += "# Played Conditional (Y): Specify how monitored users must meet the played_filter_* and/or created_filter_*.\n"
    config_file += "#   all - Every monitored user(s) must meet the Played Count and Played Count Inequality of both the played_filter_* and created_filter_*\n"
    config_file += "#   any - One or more monitored user(s) must meet the Played Count and Played Count Inequality of either the played_filter_* or created_filter_*\n"
    config_file += "#   all_any - Every monitored user(s) must meet the Played Count and Played Count Inequality of either the played_filter_* or created_filter_*\n"
    config_file += "#   any_all - One or more monitored user(s) must meet the Played Count and Played Count Inequality of both the played_filter_* and created_filter_*\n"
    config_file += "#   all_played - Every monitored user(s) must meet the Played Count and Played Count Inequality of the played_filter_*\n"
    config_file += "#   any_played - One or more monitored user(s) must meet the Played Count and Played Count Inequality of the played_filter_*\n"
    config_file += "#   all_created - Every monitored user(s) must meet the Played Count and Played Count Inequality of the created_filter_*\n"
    config_file += "#   any_created - One or more monitored user(s) must meet the Played Count and Played Count Inequality of the created_filter_*\n"
    config_file += "#   ignore - Ignore if monitored user(s) meet the Played Count and Played Count Inequality of both the played_filter_* and created_filter_*\n"
    config_file += "#\n"
    config_file += "# Action Control (Z): Specify the action the script will take when (X) and (Y) is True/False\n"
    config_file += "#   0 - No action taken on True; No action taken on False (disabled)\n"
    config_file += "#   1 - No action taken on True; Action taken on False\n"
    config_file += "#   2 - No action taken on True; Opposite action taken on False\n"
    config_file += "#   3 - Action taken on True; No action taken on False (recommended)\n"
    config_file += "#   4 - Action taken on True; Action taken on False\n"
    config_file += "#   5 - Action taken on True; Opposite action taken on False (recommended)\n"
    config_file += "#   6 - Opposite action taken on True; No action taken on False\n"
    config_file += "#   7 - Opposite action taken on True; Action taken on False\n"
    config_file += "#   8 - Opposite action taken on True; Opposite action taken on False\n"
    config_file += "#\n"
    config_file += "# (['keep','any','ignore',3] : default)\n"
    config_file += "#----------------------------------------------------------#\n"
    if not (the_dict['UPDATE_CONFIG']):
        config_file += "whitelisted_behavior_movie=" + str(get_default_config_values('whitelisted_behavior_movie')) + "\n"
        config_file += "whitelisted_behavior_episode=" + str(get_default_config_values('whitelisted_behavior_episode')) + "\n"
        config_file += "whitelisted_behavior_audio=" + str(get_default_config_values('whitelisted_behavior_audio')) + "\n"
        if (isJellyfinServer(the_dict['server_brand'])):
            config_file += "whitelisted_behavior_audiobook=" + str(get_default_config_values('whitelisted_behavior_audiobook')) + "\n"
    elif (the_dict['UPDATE_CONFIG']):
        config_file += "whitelisted_behavior_movie=" + str(cfg.whitelisted_behavior_movie) + "\n"
        config_file += "whitelisted_behavior_episode=" + str(cfg.whitelisted_behavior_episode) + "\n"
        config_file += "whitelisted_behavior_audio=" + str(cfg.whitelisted_behavior_audio) + "\n"
        if (isJellyfinServer(the_dict['server_brand'])):
            config_file += "whitelisted_behavior_audiobook=" + str(cfg.whitelisted_behavior_audiobook) + "\n"
    #config_file += "#----------------------------------------------------------#\n"
    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# Blacklisted Behavioral Statements\n"
    config_file += "#\n"
    config_file += "# Blacklisting is the fifth (and lowest) priority\n"
    config_file += "#\n"
    config_file += "# [W, X, Y, Z]\n"
    config_file += "#\n"
    config_file += "# W - Action\n"
    config_file += "# X - User Conditional\n"
    config_file += "# Y - Played Conditional\n"
    config_file += "# Z - Action Control\n"
    config_file += "#\n"
    config_file += "# Action (W): Specify which action should be taken when (X) and (Y) is True.\n"
    config_file += "#   delete - Delete media item from server\n"
    config_file += "#   keep - Do NOT delete media item from server\n"
    config_file += "#\n"
    config_file += "# User Conditional (X): Specify how monitored users must have the media item blacklisted.\n"
    config_file += "#   all - Every monitored user must have the media item blacklisted\n"
    config_file += "#   any - One or more monitored users must have the media item blacklisted\n"
    config_file += "#\n"
    config_file += "# Played Conditional (Y): Specify how monitored users must meet the played_filter_* and/or created_filter_*.\n"
    config_file += "#   all - Every monitored user(s) must meet the Played Count and Played Count Inequality of both the played_filter_* and created_filter_*\n"
    config_file += "#   any - One or more monitored user(s) must meet the Played Count and Played Count Inequality of either the played_filter_* or created_filter_*\n"
    config_file += "#   all_any - Every monitored user(s) must meet the Played Count and Played Count Inequality of either the played_filter_* or created_filter_*\n"
    config_file += "#   any_all - One or more monitored user(s) must meet the Played Count and Played Count Inequality of both the played_filter_* and created_filter_*\n"
    config_file += "#   all_played - Every monitored user(s) must meet the Played Count and Played Count Inequality of the played_filter_*\n"
    config_file += "#   any_played - One or more monitored user(s) must meet the Played Count and Played Count Inequality of the played_filter_*\n"
    config_file += "#   all_created - Every monitored user(s) must meet the Played Count and Played Count Inequality of the created_filter_*\n"
    config_file += "#   any_created - One or more monitored user(s) must meet the Played Count and Played Count Inequality of the created_filter_*\n"
    config_file += "#   ignore - Ignore if monitored user(s) meet the Played Count and Played Count Inequality of both the played_filter_* and created_filter_*\n"
    config_file += "#\n"
    config_file += "# Action Control (Z): Specify the action the script will take when (X) and (Y) is True/False\n"
    config_file += "#   0 - No action taken on True; No action taken on False (disabled)\n"
    config_file += "#   1 - No action taken on True; Action taken on False\n"
    config_file += "#   2 - No action taken on True; Opposite action taken on False\n"
    config_file += "#   3 - Action taken on True; No action taken on False (recommended)\n"
    config_file += "#   4 - Action taken on True; Action taken on False\n"
    config_file += "#   5 - Action taken on True; Opposite action taken on False (recommended)\n"
    config_file += "#   6 - Opposite action taken on True; No action taken on False\n"
    config_file += "#   7 - Opposite action taken on True; Action taken on False\n"
    config_file += "#   8 - Opposite action taken on True; Opposite action taken on False\n"
    config_file += "#\n"
    config_file += "# (['delete','any','any',3] : default)\n"
    config_file += "#----------------------------------------------------------#\n"
    if not (the_dict['UPDATE_CONFIG']):
        config_file += "blacklisted_behavior_movie=" + str(get_default_config_values('blacklisted_behavior_movie')) + "\n"
        config_file += "blacklisted_behavior_episode=" + str(get_default_config_values('blacklisted_behavior_episode')) + "\n"
        config_file += "blacklisted_behavior_audio=" + str(get_default_config_values('blacklisted_behavior_audio')) + "\n"
        if (isJellyfinServer(the_dict['server_brand'])):
            config_file += "blacklisted_behavior_audiobook=" + str(get_default_config_values('blacklisted_behavior_audiobook')) + "\n"
    elif (the_dict['UPDATE_CONFIG']):
        config_file += "blacklisted_behavior_movie=" + str(cfg.blacklisted_behavior_movie) + "\n"
        config_file += "blacklisted_behavior_episode=" + str(cfg.blacklisted_behavior_episode) + "\n"
        config_file += "blacklisted_behavior_audio=" + str(cfg.blacklisted_behavior_audio) + "\n"
        if (isJellyfinServer(the_dict['server_brand'])):
            config_file += "blacklisted_behavior_audiobook=" + str(cfg.blacklisted_behavior_audiobook) + "\n"
    #config_file += "#----------------------------------------------------------#\n"
    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# Decide the minimum number of episodes to remain in all tv series'\n"
    config_file += "# This ignores the played and unplayed states of episodes\n"
    config_file += "#  0 - Episodes will be deleted based on the Filter and Behavioral Statements\n"
    config_file += "#  1-730500 - Episodes will be deleted based on the Filter and Behavioral Statements;\n"
    config_file += "#              unless the remaining played and unplayed episodes are less than or\n"
    config_file += "#              equal to the chosen value\n"
    config_file += "# (0 : default)\n"
    config_file += "#----------------------------------------------------------#\n"
    if not (the_dict['UPDATE_CONFIG']):
        config_file += "minimum_number_episodes=" + str(get_default_config_values('minimum_number_episodes')) + "\n"
    elif (the_dict['UPDATE_CONFIG']):
        config_file += "minimum_number_episodes=" + str(cfg.minimum_number_episodes) + "\n"
    #config_file += "#----------------------------------------------------------#\n"
    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# Decide the minimum number of played episodes to remain in all tv series'\n"
    config_file += "# Keeping one or more played epsiodes for each series allows the \"Next Up\"\n"
    config_file += "#  functionality to notify user(s) when a new episode for a series\n"
    config_file += "#  is available\n"
    config_file += "# This value applies only to played episodes\n"
    config_file += "#  0 - Episodes will be deleted based on the Filter and Behavioral Statements\n"
    config_file += "#  1-730500 - Episodes will be deleted based on the Filter and Behavioral Statements;\n"
    config_file += "#              unless the remaining played episodes are less than or equal to the\n"
    config_file += "#              chosen value\n"
    config_file += "# (0 : default)\n"
    config_file += "#----------------------------------------------------------#\n"
    if not (the_dict['UPDATE_CONFIG']):
        config_file += "minimum_number_played_episodes=" + str(get_default_config_values('minimum_number_played_episodes')) + "\n"
    elif (the_dict['UPDATE_CONFIG']):
        config_file += "minimum_number_played_episodes=" + str(cfg.minimum_number_played_episodes) + "\n"
    #config_file += "#----------------------------------------------------------#\n"
    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# Decide how 'minimum_number_episodes' and 'minimum_number_played_episodes' will behave.\n"
    config_file += "# The minimum number of played and unplayed episodes will vary for each user and for each\n"
    config_file += "#  series when multiple users are watching the same series at different paces.\n"
    config_file += "# The following option gives a mechanism to control this in different ways.\n"
    config_file += "# The 'minimum_number_episodes' and 'minimum_number_played_episodes' will be based off of...\n"
    config_file += "#  'User's Name' - The UserName specified; If matching UserName not found script will assume default.\n"
    config_file += "#  'User's Id' - The UserId specified; If matching UserName not found script will assume default.\n"
    config_file += "#  'Max Played' - The first user with the highest number of played episodes to be deleted for each series.\n"
    config_file += "#  'Min Played' - The first user with the lowest number of played episodes to be deleted for each series.\n"
    config_file += "#  'Max Unplayed' - The first user with the highest number of unplayed episodes to be deleted for each series.\n"
    config_file += "#  'Min Unplayed' - The first user with the lowest number of unplayed episodes to be deleted for each series.\n"
    config_file += "# The Max/Min Played/Unplayed values can be mixed and matched. For example...\n"
    config_file += "#  'Max Unplayed Min Played' - The number played episodes to be deleted is based off the user\n"
    config_file += "#                                with the highest number of unplayed episodes to be deleted for a\n"
    config_file += "#                                specified series. The number of unplayed episodes to be deleted is\n"
    config_file += "#                                based off the user with the lowest number of played episodes to be\n"
    config_file += "#                                deleted for a specified series.\n"
    config_file += "# ('Min Played Min Unplayed' : default)\n"
    config_file += "#----------------------------------------------------------#\n"
    if not (the_dict['UPDATE_CONFIG']):
        config_file += "minimum_number_episodes_behavior='" + str(get_default_config_values('minimum_number_episodes_behavior')) + "'\n"
    elif (the_dict['UPDATE_CONFIG']):
        config_file += "minimum_number_episodes_behavior='" + str(cfg.minimum_number_episodes_behavior) + "'\n"
    #config_file += "#----------------------------------------------------------#\n"
    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# Add last played date for items missing the LastPlayedDate data\n"
    config_file += "# When played state is imported from Trakt the LastPlayedDate is\n"
    config_file += "#  not populated. To allow the script to maintain functionality\n"
    config_file += "#  the current date and time the script is run can be used as the\n"
    config_file += "#  LastPlayedDate value.\n"
    config_file += "#  False - Do not set the LastPlayedDate; days since played will show as\n"
    config_file += "#        the number of days since 1970-Jan-01 00:00:00hrs for any media\n"
    config_file += "#        items missng the LastPlayedDate data.\n"
    config_file += "#  True - Set the LastPlayedDate; the current date-time the script is\n"
    config_file += "#        run will be saved as the LastPlayedDate for any media items\n"
    config_file += "#        missing the LastPlayedDate data. Only media items missing the\n"
    config_file += "#        LastPlayedDate data are modified\n"
    config_file += "# (True : default)\n"
    config_file += "#----------------------------------------------------------#\n"
    if not (the_dict['UPDATE_CONFIG']):
        config_file += "movie_set_missing_last_played_date=" + str(get_default_config_values('movie_set_missing_last_played_date')) + "\n"
        config_file += "episode_set_missing_last_played_date=" + str(get_default_config_values('episode_set_missing_last_played_date')) + "\n"
        config_file += "audio_set_missing_last_played_date=" + str(get_default_config_values('audio_set_missing_last_played_date')) + "\n"
        if (isJellyfinServer(the_dict['server_brand'])):
            config_file += "audiobook_set_missing_last_played_date=" + str(get_default_config_values('audiobook_set_missing_last_played_date')) + "\n"
    elif (the_dict['UPDATE_CONFIG']):
        config_file += "movie_set_missing_last_played_date=" + str(cfg.movie_set_missing_last_played_date) + "\n"
        config_file += "episode_set_missing_last_played_date=" + str(cfg.episode_set_missing_last_played_date) + "\n"
        config_file += "audio_set_missing_last_played_date=" + str(cfg.audio_set_missing_last_played_date) + "\n"
        if (isJellyfinServer(the_dict['server_brand'])):
            config_file += "audiobook_set_missing_last_played_date=" + str(cfg.audiobook_set_missing_last_played_date) + "\n"
    #config_file += "#----------------------------------------------------------#\n"
    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# Enable/Disable console outputs by type\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# Should the script print its output to the console\n"
    config_file += "#  Everytime something is printed to the console the script has to\n"
    config_file += "#   wait for the print to finish. This causes the script to run slower\n"
    config_file += "#   The biggest offenders are:\n"
    config_file += "#     print_*_delete_info\n"
    config_file += "#     print_*_keep_info\n"
    config_file += "#  False - Do not print this output type to the console\n"
    config_file += "#  True - Print this output type to the console\n"
    config_file += "# (True : default)\n"
    config_file += "#----------------------------------------------------------#\n"
    if not (the_dict['UPDATE_CONFIG']):
        config_file += "print_script_header=" + str(get_default_config_values('print_script_header')) + "\n"
        config_file += "print_script_warning=" + str(get_default_config_values('print_script_warning')) + "\n"
        config_file += "print_user_header=" + str(get_default_config_values('print_user_header')) + "\n"
        config_file += "print_movie_delete_info=" + str(get_default_config_values('print_movie_delete_info')) + "\n"
        config_file += "print_movie_keep_info=" + str(get_default_config_values('print_movie_keep_info')) + "\n"
        config_file += "print_episode_delete_info=" + str(get_default_config_values('print_episode_delete_info')) + "\n"
        config_file += "print_episode_keep_info=" + str(get_default_config_values('print_episode_keep_info')) + "\n"
        config_file += "print_audio_delete_info=" + str(get_default_config_values('print_audio_delete_info')) + "\n"
        config_file += "print_audio_keep_info=" + str(get_default_config_values('print_audio_keep_info')) + "\n"
        if (isJellyfinServer(the_dict['server_brand'])):
            config_file += "print_audiobook_delete_info=" + str(get_default_config_values('print_audiobook_delete_info')) + "\n"
            config_file += "print_audiobook_keep_info=" + str(get_default_config_values('print_audiobook_keep_info')) + "\n"
        config_file += "print_movie_post_processing_info=" + str(get_default_config_values('print_movie_post_processing_info')) + "\n"
        config_file += "print_episode_post_processing_info=" + str(get_default_config_values('print_episode_post_processing_info')) + "\n"
        config_file += "print_audio_post_processing_info=" + str(get_default_config_values('print_audio_post_processing_info')) + "\n"
        if (isJellyfinServer(the_dict['server_brand'])):
            config_file += "print_audiobook_post_processing_info=" + str(get_default_config_values('print_audiobook_post_processing_info')) + "\n"
        config_file += "print_summary_header=" + str(get_default_config_values('print_summary_header')) + "\n"
        config_file += "print_movie_summary=" + str(get_default_config_values('print_movie_summary')) + "\n"
        config_file += "print_episode_summary=" + str(get_default_config_values('print_episode_summary')) + "\n"
        config_file += "print_audio_summary=" + str(get_default_config_values('print_audio_summary')) + "\n"
        if (isJellyfinServer(the_dict['server_brand'])):
            config_file += "print_audiobook_summary=" + str(get_default_config_values('print_audiobook_summary')) + "\n"
        config_file += "print_script_footer=" + str(get_default_config_values('print_script_footer')) + "\n"
    elif (the_dict['UPDATE_CONFIG']):
        config_file += "print_script_header=" + str(cfg.print_script_header) + "\n"
        config_file += "print_script_warning=" + str(cfg.print_script_warning) + "\n"
        config_file += "print_user_header=" + str(cfg.print_user_header) + "\n"
        config_file += "print_movie_delete_info=" + str(cfg.print_movie_delete_info) + "\n"
        config_file += "print_movie_keep_info=" + str(cfg.print_movie_keep_info) + "\n"
        config_file += "print_episode_delete_info=" + str(cfg.print_episode_delete_info) + "\n"
        config_file += "print_episode_keep_info=" + str(cfg.print_episode_keep_info) + "\n"
        config_file += "print_audio_delete_info=" + str(cfg.print_audio_delete_info) + "\n"
        config_file += "print_audio_keep_info=" + str(cfg.print_audio_keep_info) + "\n"
        if (isJellyfinServer(the_dict['server_brand'])):
            config_file += "print_audiobook_delete_info=" + str(cfg.print_audiobook_delete_info) + "\n"
            config_file += "print_audiobook_keep_info=" + str(cfg.print_audiobook_keep_info) + "\n"
        config_file += "print_movie_post_processing_info=" + str(cfg.print_movie_post_processing_info) + "\n"
        config_file += "print_episode_post_processing_info=" + str(cfg.print_episode_post_processing_info) + "\n"
        config_file += "print_audio_post_processing_info=" + str(cfg.print_audio_post_processing_info) + "\n"
        if (isJellyfinServer(the_dict['server_brand'])):
            config_file += "print_audiobook_post_processing_info=" + str(cfg.print_audiobook_post_processing_info) + "\n"
        config_file += "print_summary_header=" + str(cfg.print_summary_header) + "\n"
        config_file += "print_movie_summary=" + str(cfg.print_movie_summary_info) + "\n"
        config_file += "print_episode_summary=" + str(cfg.print_episode_summary_info) + "\n"
        config_file += "print_audio_summary=" + str(cfg.print_audio_summary_info) + "\n"
        if (isJellyfinServer(the_dict['server_brand'])):
            config_file += "print_audiobook_summary=" + str(cfg.print_audiobook_summary) + "\n"
        config_file += "print_script_footer=" + str(get_default_config_values('print_script_footer')) + "\n"
    #config_file += "#----------------------------------------------------------#\n"
    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# Modify console outputs formatting\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# Should the script print its output with a specific format\n"
    config_file += "#\n"
    config_file += "# [FC, BC, FS]\n"
    config_file += "#\n"
    config_file += "# FC - Font Color\n"
    config_file += "# BC - Background Color (aka highlight)\n"
    config_file += "# FS - Font Style\n"
    config_file += "#\n"
    config_file += "# Directly run the following command to see which attributes your console supports:\n"
    config_file += "#  pythonX mumc_modules/mumc_console_attributes.py\n"
    config_file += "#\n"
    config_file += "# Or run the script with the -a option:\n"
    config_file += "#  pythonX mumc.py -a\n"
    config_file += "#\n"
    config_file += "# Replace X with the proper python version number (i.e. python3, python3.11, etc...)\n"
    config_file += "#\n"
    config_file += "#  Font & Background Colors:\n"
    config_file += "#   'black'\n"
    config_file += "#   'red'\n"
    config_file += "#   'green'\n"
    config_file += "#   'yellow'\n"
    config_file += "#   'blue'\n"
    config_file += "#   'magenta'\n"
    config_file += "#   'cyan'\n"
    config_file += "#   'white'\n"
    config_file += "#   'bright black' - Must be supported by your command line utility\n"
    config_file += "#   'bright red' - Must be supported by your command line utility\n"
    config_file += "#   'bright green' - Must be supported by your command line utility\n"
    config_file += "#   'bright yellow' - Must be supported by your command line utility\n"
    config_file += "#   'bright blue' - Must be supported by your command line utility\n"
    config_file += "#   'bright magenta' - Must be supported by your command line utility\n"
    config_file += "#   'bright cyan' - Must be supported by your command line utility\n"
    config_file += "#   'bright white' - Must be supported by your command line utility\n"
    config_file += "#   'default' - As defined by your command line utility\n"
    config_file += "#   '' - No formatting is used (aka default)\n"
    config_file += "#   None - No formatting is used\n"
    config_file += "#\n"
    config_file += "#  Font Styles:\n"
    config_file += "#   'bold'\n"
    config_file += "#   'faint' - Must be supported by your command line utility\n"
    config_file += "#   'italic' - Must be supported by your command line utility\n"
    config_file += "#   'underline'\n"
    config_file += "#   'slow blink' - Must be supported by your command line utility\n"
    config_file += "#   'fast blink' - Must be supported by your command line utility\n"
    config_file += "#   'swap' - Must be supported by your command line utility\n"
    config_file += "#   'conceal' - Must be supported by your command line utility\n"
    config_file += "#   'strikethrough' - Must be supported by your command line utility\n"
    config_file += "#   'fraktur' - Must be supported by your command line utility\n"
    config_file += "#   'double underline' - Must be supported by your command line utility\n"
    config_file += "#   'frame' - Must be supported by your command line utility\n"
    config_file += "#   'encircle' - Must be supported by your command line utility\n"
    config_file += "#   'overline' - Must be supported by your command line utility\n"
    config_file += "#   'ideogram underline' - Must be supported by your command line utility\n"
    config_file += "#   'ideogram double underline' - Must be supported by your command line utility\n"
    config_file += "#   'ideogram overline' - Must be supported by your command line utility\n"
    config_file += "#   'ideogram double overline' - Must be supported by your command line utility\n"
    config_file += "#   'ideogram stress mark' - Must be supported by your command line utility\n"
    config_file += "#   'superscript' - Must be supported by your command line utility\n"
    config_file += "#   'subscript' - Must be supported by your command line utility\n"
    config_file += "#   'default' - As defined by your command line utility\n"
    config_file += "#   '' - No formatting is used (aka default)\n"
    config_file += "#   None - No formatting is used\n"
    config_file += "#\n"
    config_file += "# Example:\n"
    config_file += "#  Print the movie delete information with red, underlined text, and a bright black highlight.\n"
    config_file += "#\n"
    config_file += "#   movie_delete_info_format=[FC, BC, FS]\n"
    config_file += "#\n"
    config_file += "#   FC = 'red'\n"
    config_file += "#   BC = 'bright black'\n"
    config_file += "#   FS = 'underline\n"
    config_file += "#\n"
    config_file += "#   movie_delete_info_format=['red','bright black','underline']\n"
    config_file += "#\n"
    config_file += "# ('' : default)\n"
    config_file += "#----------------------------------------------------------#\n"
    if not (the_dict['UPDATE_CONFIG']):
        config_file += "script_header_format=" + str(get_default_config_values('script_header_format')) + "\n"
        config_file += "script_warnings_format=" + str(get_default_config_values('script_warnings_format')) + "\n"
        config_file += "user_header_format=" + str(get_default_config_values('user_header_format')) + "\n"
        config_file += "movie_delete_info_format=" + str(get_default_config_values('movie_delete_info_format')) + "\n"
        config_file += "movie_keep_info_format=" + str(get_default_config_values('movie_keep_info_format')) + "\n"
        config_file += "episode_delete_info_format=" + str(get_default_config_values('episode_delete_info_format')) + "\n"
        config_file += "episode_keep_info_format=" + str(get_default_config_values('episode_keep_info_format')) + "\n"
        config_file += "audio_delete_info_format=" + str(get_default_config_values('audio_delete_info_format')) + "\n"
        config_file += "audio_keep_info_format=" + str(get_default_config_values('audio_keep_info_format')) + "\n"
        if (isJellyfinServer(the_dict['server_brand'])):
            config_file += "audiobook_keep_info_format=" + str(get_default_config_values('audiobook_keep_info_format')) + "\n"
            config_file += "audiobook_keep_info_format=" + str(get_default_config_values('audiobook_keep_info_format')) + "\n"
        config_file += "movie_post_processing_format=" + str(get_default_config_values('movie_post_processing_format')) + "\n"
        config_file += "episode_post_processing_format=" + str(get_default_config_values('episode_post_processing_format')) + "\n"
        config_file += "audio_post_processing_format=" + str(get_default_config_values('audio_post_processing_format')) + "\n"
        if (isJellyfinServer(the_dict['server_brand'])):
            config_file += "audiobook_post_processing_format=" + str(get_default_config_values('audiobook_post_processing_format')) + "\n"
        config_file += "summary_header_format=" + str(get_default_config_values('summary_header_format')) + "\n"
        config_file += "movie_summary_format=" + str(get_default_config_values('movie_summary_format')) + "\n"
        config_file += "episode_summary_format=" + str(get_default_config_values('episode_summary_format')) + "\n"
        config_file += "audio_summary_format=" + str(get_default_config_values('audio_summary_format')) + "\n"
        if (isJellyfinServer(the_dict['server_brand'])):
            config_file += "audiobook_summary_format=" + str(get_default_config_values('audiobook_summary_format')) + "\n"
        config_file += "script_footer_format=" + str(get_default_config_values('script_footer_format')) + "\n"
    elif (the_dict['UPDATE_CONFIG']):
        config_file += "script_header_format=" + str(cfg.script_header_format) + "\n"
        config_file += "script_warnings_format=" + str(cfg.script_warnings_format) + "\n"
        config_file += "user_header_format=" + str(cfg.user_header_format) + "\n"
        config_file += "movie_delete_info_format=" + str(cfg.movie_delete_info_format) + "\n"
        config_file += "movie_keep_info_format=" + str(cfg.movie_keep_info_format) + "\n"
        config_file += "episode_delete_info_format=" + str(cfg.episode_delete_info_format) + "\n"
        config_file += "episode_keep_info_format=" + str(cfg.episode_keep_info_format) + "\n"
        config_file += "audio_delete_info_format=" + str(cfg.audio_delete_info_format) + "\n"
        config_file += "audio_keep_info_format=" + str(cfg.audio_keep_info_format) + "\n"
        if (isJellyfinServer(the_dict['server_brand'])):
            config_file += "audiobook_keep_info_format=" + str(cfg.audiobook_keep_info_format) + "\n"
            config_file += "audiobook_keep_info_format=" + str(cfg.audiobook_keep_info_format) + "\n"
        config_file += "movie_post_processing_format=" + str(cfg.movie_post_processing_format) + "\n"
        config_file += "episode_post_processing_format=" + str(cfg.episode_post_processing_format) + "\n"
        config_file += "audio_post_processing_format=" + str(cfg.audio_post_processing_format) + "\n"
        if (isJellyfinServer(the_dict['server_brand'])):
            config_file += "audiobook_post_processing_format=" + str(cfg.audiobook_post_processing_format) + "\n"
        config_file += "summary_header_format=" + str(cfg.summary_header_format) + "\n"
        config_file += "movie_summary_format=" + str(cfg.movie_summary_format) + "\n"
        config_file += "episode_summary_format=" + str(cfg.episode_summary_format) + "\n"
        config_file += "audio_summary_format=" + str(cfg.audio_summary_format) + "\n"
        if (isJellyfinServer(the_dict['server_brand'])):
            config_file += "audiobook_summary_format=" + str(cfg.audiobook_summary_format) + "\n"
        config_file += "script_footer_format=" + str(cfg.script_footer_format) + "\n"
    #config_file += "#----------------------------------------------------------#\n"
    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# Set to True to add new users or edit existing users\n"
    config_file += "# Must be a boolean True or False value\n"
    config_file += "#  False - Operate normally\n"
    config_file += "#  True  - Enable configuration editor mode; will NOT delete media items\n"
    config_file += "#           Resets to dry run mode (REMOVE_FILES=False)\n"
    config_file += "# (False : default)\n"
    config_file += "#----------------------------------------------------------#\n"
    if not (the_dict['UPDATE_CONFIG']):
        config_file += "UPDATE_CONFIG=False\n"
    elif (the_dict['UPDATE_CONFIG']):
        config_file += "UPDATE_CONFIG=" + str(cfg.UPDATE_CONFIG) + "\n"
    #config_file += "#----------------------------------------------------------#\n"
    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# Must be a boolean True or False value\n"
    config_file += "#  False - Disables the ability to delete media (dry run mode)\n"
    config_file += "#  True - Enable the ability to delete media\n"
    config_file += "# (False : default)\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "REMOVE_FILES=False\n"
    #config_file += "#----------------------------------------------------------#\n"
    config_file += "\n"
    config_file += "#---------!!!DO NOT MODIFY ANYTHING BELOW!!!----------------#\n"
    config_file += "# These are automatically created during setup.\n"
    config_file += "#   If you do not know EXACTLY what you are doing; changing these\n"
    config_file += "#      may cause script failure.\n"
    config_file += "#   The only way to recover from script failure is to revert the\n"
    config_file += "#      config back to the way it was OR rebuild a new config.\n"
    config_file += "#----------------------------------------------------------#\n"
    #config_file += "#----------------------------------------------------------#\n"    
    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# Server branding; chosen during setup\n"
    config_file += "#  0 - 'emby'\n"
    config_file += "#  1 - 'jellyfin'\n"
    config_file += "#----------------------------------------------------------#\n"
    if not (the_dict['UPDATE_CONFIG']):
        config_file += "server_brand='" + the_dict['server_brand'] + "'\n"
    elif (the_dict['UPDATE_CONFIG']):
        config_file += "server_brand='" + cfg.server_brand + "'\n"
    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# Server URL; created during setup\n"
    config_file += "#----------------------------------------------------------#\n"
    if not (the_dict['UPDATE_CONFIG']):
        config_file += "server_url='" + the_dict['server_url'] + "'\n"
    elif (the_dict['UPDATE_CONFIG']):
        config_file += "server_url='" + cfg.server_url + "'\n"
    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# Authentication Key; requested from server during setup\n"
    config_file += "#  Used for API queries sent to the server\n"
    config_file += "#  Also know as an Access Token\n"
    config_file += "#----------------------------------------------------------#\n"
    if not (the_dict['UPDATE_CONFIG']):
        config_file += "auth_key='" + the_dict['auth_key'] + "'\n"
    elif (the_dict['UPDATE_CONFIG']):
        config_file += "auth_key='" + cfg.auth_key + "'\n"
    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# Decide how the script will use the libraries chosen for each user\n"
    config_file += "#  Only used during creation or editing of the configuration file\n"
    config_file += "#  0 - blacklist - Chosen libraries will blacklisted\n"
    config_file += "#                  All other libraries will be whitelisted\n"
    config_file += "#  1 - whitelist - Chosen libraries will whitelisted\n"
    config_file += "#                  All other libraries will be blacklisted\n"
    config_file += "# (blacklist : default)\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "library_setup_behavior='" + the_dict['library_setup_behavior'] + "'\n"
    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# Decide how the script will match media items to libraries\n"
    config_file += "#  0 - byId - Media items will be matched to libraries using \'LibraryIds\'\n"
    config_file += "#  1 - byPath - Media items will be matched to libraries using \'Paths\'\n"
    config_file += "#  2 - byNetwork Path - Media items will be matched to libraries using \'NetworkPaths\'\n"
    config_file += "# Filtering byId does not apply to the rules below.\n"
    config_file += "# Filtering byPath requires no shared network folders are configured.\n"
    config_file += "# Filtering byNetworkPath requires shared network folders are configured.\n"
    config_file += "# (byId : default)\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "library_matching_behavior='" + the_dict['library_matching_behavior'] + "'\n"
    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# User UserName(s) and UserId(s) of monitored account(s); chosen during setup\n"
    config_file += "# The order of the UserName(s):UserId(s) here must match the order of the\n"
    config_file += "#  UserId(s)/UserNames(s) in user_bl_libs and user_wl_libs\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "user_keys='" + the_dict['user_keys'] + "'\n"
    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# Blacklisted libraries with corresponding user keys(s)\n"
    config_file += "# These libraries are typically searched for media items to delete\n"
    config_file += "# Chosen during setup\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "user_bl_libs='" + the_dict['user_bl_libs'] + "'\n"
    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# Whitelisted libraries with corresponding user keys(s)\n"
    config_file += "# These libraries are typically not searched for media items to delete\n"
    config_file += "# Chosen during setup\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "user_wl_libs='" + the_dict['user_wl_libs'] + "'\n"
    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# API query attempts\n"
    config_file += "# Number of times to retry an API request\n"
    config_file += "#  Delay between initial attempt and the first retry is 1 second\n"
    config_file += "#  The delay will double with each attempt after the first retry\n"
    config_file += "#  Delay between the orginal request and retry #1 is (2^0) 1 second\n"
    config_file += "#  Delay between retry #1 and retry #2 is (2^1) 2 seconds\n"
    config_file += "#  Delay between retry #2 and retry #3 is (2^2) 4 seconds\n"
    config_file += "#  Delay between retry #3 and retry #4 is (2^3) 8 seconds\n"
    config_file += "#  Delay between retry #4 and retry #5 is (2^4) 16 seconds\n"
    config_file += "#  Delay between retry #5 and retry #6 is (2^5) 32 seconds\n"
    config_file += "#  ...\n"
    config_file += "#  Delay between retry #15 and retry #16 is (2^15) 32768 seconds\n"
    config_file += "#  0-16 - number of retry attempts\n"
    config_file += "#  (4 : default)\n"
    config_file += "#----------------------------------------------------------#\n"
    if not (the_dict['UPDATE_CONFIG']):
        config_file += "api_query_attempts=4\n"
    elif (the_dict['UPDATE_CONFIG']):
        config_file += "api_query_attempts=" + str(cfg.api_query_attempts) + "\n"
    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# API query item limit\n"
    config_file += "# To keep the server running smoothly we do not want it to return a\n"
    config_file += "#  large amount of metadata from a single API query\n"
    config_file += "# If the server lags or bogs down when this script runs try lowering\n"
    config_file += "#  this value to allow the server to return smaller amounts of data\n"
    config_file += "# ALL media items and their metadata are processed regardless of this value\n"
    config_file += "#  1-10000 - maximum number of media items the server will return for each API query\n"
    config_file += "#  (25 : default)\n"
    config_file += "#----------------------------------------------------------#\n"
    if not (the_dict['UPDATE_CONFIG']):
        config_file += "api_query_item_limit=25\n"
    elif (the_dict['UPDATE_CONFIG']):
        config_file += "api_query_item_limit=" + str(cfg.api_query_item_limit) + "\n"

    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# API cache maximum size\n"
    config_file += "# To keep the script running efficiently we do not want to send the\n"
    config_file += "#  same requests to the server repeatedly\n"
    config_file += "# If any single data entry is larger than the cache size, that data entry\n"
    config_file += "#  will not be cached\n"
    config_file += "# 0.1MB of cache is better than 0MB of cache\n"
    config_file += "# Recommend setting DEBUG=1 to print the cache stats to determine the\n"
    config_file += "#  best cache settings (i.e. size, fallback behavior, and last accessed time)\n"
    config_file += "#\n"
    config_file += "# MegaByte Sizing Reference\n"
    config_file += "#  1MB = 1048576 Bytes\n"
    config_file += "#  1000MB = 1GB\n"
    config_file += "#  10000MB = 10GB\n"
    config_file += "#\n"
    config_file += "#  0 - Disable cache\n"
    config_file += "#  1-10000 - Size of cache in megabytes (MB)\n"
    config_file += "#  (32 : default)\n"
    config_file += "#----------------------------------------------------------#\n"
    if not (the_dict['UPDATE_CONFIG']):
        config_file += "api_query_cache_size=" + str(get_default_config_values('api_query_cache_size')) + "\n"
    elif (the_dict['UPDATE_CONFIG']):
        config_file += "api_query_cache_size=" + str(cfg.api_query_cache_size) + "\n"

    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# API cache fallback behavior\n"
    config_file += "# By default the script is a hybrid LFU-LRU RAM Cache\n"
    config_file += "#\n"
    config_file += "# 1.First the cache is filled\n"
    config_file += "# 2.Once full the cache uses api_query_cache_last_accessed_time to\n"
    config_file += "#    establish a minimum age an entry has to be for removal\n"
    config_file += "# 3.Then the oldest entry meeting the minimum age (from step 2) with\n"
    config_file += "#    the lowest number of hits (reads) is removed\n"
    config_file += "# 4.If no entrys meet the minimum age or all have the same number of\n"
    config_file += "#    cache hits (reads); api_query_cache_fallback_behavior is used\n"
    config_file += "# Recommend setting DEBUG=1 to print the cache stats to determine the\n"
    config_file += "#  best cache settings (i.e. size, fallback behavior, and last accessed time)\n"
    config_file += "#\n"
    config_file += "# Fallback To\n"
    config_file += "#  'FIFO' - First In First Out (first entry is removed)\n"
    config_file += "#  'LFU' - Least Frequently Used (first entry with the lowest number of hits is removed)\n"
    config_file += "#  'LRU' - Least Recently Used (first entry with the oldest access time is removed)\n"
    config_file += "#  (LRU : default)\n"
    config_file += "#----------------------------------------------------------#\n"
    if not (the_dict['UPDATE_CONFIG']):
        config_file += "api_query_cache_fallback_behavior='" + str(get_default_config_values('api_query_cache_fallback_behavior')) + "'\n"
    elif (the_dict['UPDATE_CONFIG']):
        config_file += "api_query_cache_fallback_behavior='" + str(cfg.api_query_cache_fallback_behavior) + "'\n"

    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# API cache entry minium age\n"
    config_file += "#\n"
    config_file += "# Once full the cache uses api_query_cache_last_accessed_time to\n"
    config_file += "#  establish a minimum age an entry has to be for removal\n"
    config_file += "#\n"
    config_file += "# Bigger is NOT always better. The older an entry is allowed to be, the lower\n"
    config_file += "#  the number of elgible entries for removal when cache is full.\n"
    config_file += "#  When this happens the script will not be able to find an entry that\n"
    config_file += "#  satisfies LFU-LRU and will use api_query_cache_fallback_behavior\n"
    config_file += "#  until there is enough space in cache for the newest entry.\n"
    config_file += "# Of course setting a bigger cache size means needing to remove less\n"
    config_file += "#  cache entries.\n"
    config_file += "# Increase api_query_cache_size before increasing this api_query_cache_last_accessed_time\n"
    config_file += "# Recommend setting DEBUG=1 to print the cache stats to determine the\n"
    config_file += "#  best cache settings (i.e. size, fallback behavior, and last accessed time)\n"
    config_file += "#\n"
    config_file += "# Millisecond Timing Reference\n"
    config_file += "#  1ms = 0.001s\n"
    config_file += "#  1000ms = 1s\n"
    config_file += "#  100000ms = 100s\n"
    config_file += "#\n"
    config_file += "#  0-600000 - Minimum cached entry age for removal in milliseconds (ms)\n"
    config_file += "#  (200 : default)\n"
    config_file += "#----------------------------------------------------------#\n"
    if not (the_dict['UPDATE_CONFIG']):
        config_file += "api_query_cache_last_accessed_time=" + str(get_default_config_values('api_query_cache_last_accessed_time')) + "\n"
    elif (the_dict['UPDATE_CONFIG']):
        config_file += "api_query_cache_last_accessed_time=" + str(cfg.api_query_cache_last_accessed_time) + "\n"

    config_file += "\n"
    config_file += "#----------------------------------------------------------#\n"
    config_file += "# Must be an integer value\n"
    config_file += "#  Debug log file save to: /the/script/directory/mumc_DEBUG.log\n"
    config_file += "#  The debug log file can be large (i.e. 10s to 100s of MBytes)\n"
    config_file += "#  Recommend only enabling DEBUG when necessary\n"
    config_file += "#   0 - Debug messaging disabled\n"
    config_file += "#   1 - Level 1 debug messaging enabled\n"
    config_file += "#   2 - Level 2 debug messaging enabled\n"
    config_file += "#   3 - Level 3 debug messaging enabled\n"
    config_file += "#   4 - Level 4 debug messaging enabled\n"
    config_file += "# (0 : default)\n"
    config_file += "#----------------------------------------------------------#\n"
    if not (the_dict['UPDATE_CONFIG']):
        config_file += "DEBUG=0\n"
        #the_dict['DEBUG']=0
    elif (the_dict['UPDATE_CONFIG']):
        config_file += "DEBUG=" + str(the_dict['DEBUG']) + "\n"
    config_file += "\n"
    config_file += "#-------------End Config Options----------------------------#"

    return config_file